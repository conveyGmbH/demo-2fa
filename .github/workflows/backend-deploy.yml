# .github/workflows/backend-deploy.yml
name: Build and deploy Node.js app to Azure Web App - LS2FABackend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: backend/package.json
      
      - name: Validate backend structure
        run: |
          cd backend
          echo "üìÅ Backend structure validation:"
          ls -la
          
          # V√©rifier les fichiers critiques
          if [ ! -f "src/server.js" ]; then
            echo "‚ùå ERROR: src/server.js not found!"
            exit 1
          fi
          
          if [ ! -f "package.json" ]; then
            echo "‚ùå ERROR: package.json not found!"
            exit 1
          fi
          
          echo "‚úÖ Critical files found"
          
          # V√©rifier le script start dans package.json
          if grep -q '"start".*"node src/server.js"' package.json; then
            echo "‚úÖ Start script is correct"
          else
            echo "‚ö†Ô∏è  Start script might need adjustment"
            grep -A 5 '"scripts"' package.json
          fi
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --production
          echo "‚úÖ Dependencies installed"
          
      - name: Create web.config for Azure App Service
        run: |
          cd backend
          echo "üîß Creating web.config for Azure App Service..."
          cat > web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="src/server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="src/server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <httpErrors existingResponse="PassThrough" />
              <iisnode 
                node_env="production"
                nodeProcessCountPerApplication="1"
                maxConcurrentRequestsPerProcess="1024"
                watchedFiles="*.js"
                loggingEnabled="true"
                devErrorsEnabled="false"
              />
            </system.webServer>
          </configuration>
          EOF
          echo "‚úÖ web.config created"
          
      - name: Create deployment package from backend folder
        run: |
          cd backend
          echo "üì¶ Creating deployment package..."
          
          # Cr√©er le package avec web.config inclus
          zip -r ../backend-release.zip . \
            -x "node_modules/.cache/*" \
            -x "*.log" \
            -x ".env*" \
            -x ".git*"
          
          echo "‚úÖ Backend package created from backend/ folder"
          
          # V√©rifier le contenu du package
          echo "üìã Package contents verification:"
          unzip -l ../backend-release.zip | grep -E "(src/server.js|package.json|web.config)" || echo "‚ö†Ô∏è  Some critical files might be missing"
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: backend-release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: backend-app
          
      - name: Unzip and validate artifact for deployment
        run: |
          unzip backend-release.zip
          echo "üìÅ Files after unzip:"
          ls -la
          
          # V√©rifier les fichiers critiques
          echo "üîç Critical files verification:"
          ls -la src/server.js && echo "‚úÖ src/server.js found" || echo "‚ùå src/server.js MISSING"
          ls -la package.json && echo "‚úÖ package.json found" || echo "‚ùå package.json MISSING"
          ls -la web.config && echo "‚úÖ web.config found" || echo "‚ùå web.config MISSING"
          
          # V√©rifier le contenu du package.json
          echo "üìÑ Package.json start script:"
          grep -A 5 '"scripts"' package.json || echo "No scripts found"
        
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2BF766D5A20142FD98FE5C9A0AC83352 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_3319CE4BA45F421B8738BADAE4CEA94A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_7F935D1C76E748C79F07EC76D990ECAF }}
          
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'LS2FABackend'
          slot-name: 'Production'
          package: .
          
      - name: Configure Azure App Service settings
        run: |
          echo "üîß Configuring Azure App Service settings..."
          
          # D√©finir le startup command
          az webapp config set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP || 'defaultResourceGroup' }} \
            --name LS2FABackend \
            --startup-file "node src/server.js" \
            --always-on true \
            --http20-enabled true
          
          # D√©finir les variables d'environnement
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP || 'defaultResourceGroup' }} \
            --name LS2FABackend \
            --settings \
              NODE_ENV=production \
              WEBSITE_NODE_DEFAULT_VERSION=20.x \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
          
          echo "‚úÖ Azure App Service configured"
          
      - name: Restart Azure App Service
        run: |
          echo "üîÑ Restarting Azure App Service..."
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP || 'defaultResourceGroup' }} \
            --name LS2FABackend
          echo "‚úÖ App Service restarted"
          
      - name: Extended deployment testing
        run: |
          echo "‚è≥ Waiting for deployment to stabilize (90s)..."
          sleep 90
          
          echo "üß™ Testing backend endpoints..."
          
          # Test 1: Root endpoint
          echo "üìç Testing root endpoint..."
          ROOT_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/root_response.txt https://ls2fabackend-fthub6cvegdeagbv.westeurope-01.azurewebsites.net/)
          echo "Root response code: $ROOT_RESPONSE"
          if [ "$ROOT_RESPONSE" = "200" ]; then
            echo "‚úÖ Root endpoint responding"
            cat /tmp/root_response.txt
          else
            echo "‚ùå Root endpoint failed"
            cat /tmp/root_response.txt
          fi
          
          # Test 2: Health endpoint
          echo "üìç Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/health_response.txt https://ls2fabackend-fthub6cvegdeagbv.westeurope-01.azurewebsites.net/api/v1/health)
          echo "Health response code: $HEALTH_RESPONSE"
          if [ "$HEALTH_RESPONSE" = "200" ]; then
            echo "‚úÖ Health endpoint responding"
            cat /tmp/health_response.txt
          else
            echo "‚ùå Health endpoint failed"
            cat /tmp/health_response.txt
          fi
          
          # Test 3: API base endpoint
          echo "üìç Testing API base endpoint..."
          API_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/api_response.txt https://ls2fabackend-fthub6cvegdeagbv.westeurope-01.azurewebsites.net/api/v1)
          echo "API response code: $API_RESPONSE"
          if [ "$API_RESPONSE" = "200" ]; then
            echo "‚úÖ API base endpoint responding"
            cat /tmp/api_response.txt
          else
            echo "‚ùå API base endpoint failed"
            cat /tmp/api_response.txt
          fi
          
          # Test 4: CORS preflight
          echo "üìç Testing CORS preflight..."
          CORS_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/cors_response.txt \
            -X OPTIONS \
            -H "Origin: https://brave-bay-061146803.1.azurestaticapps.net" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type" \
            https://ls2fabackend-fthub6cvegdeagbv.westeurope-01.azurewebsites.net/api/v1/auth/login)
          echo "CORS response code: $CORS_RESPONSE"
          if [ "$CORS_RESPONSE" = "200" ] || [ "$CORS_RESPONSE" = "204" ]; then
            echo "‚úÖ CORS preflight working"
          else
            echo "‚ùå CORS preflight failed"
            cat /tmp/cors_response.txt
          fi
          
          echo "‚úÖ Deployment testing completed"
